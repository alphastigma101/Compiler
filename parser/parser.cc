#include <parser.h>
template struct std::shared_ptr<std::variant<Binary, Unary, Grouping, Literal>>; // define the underlying of ExprTypes
ExprTypes<Binary, Unary, Grouping, Literal> parser::expr;
int parser::idx = 0;
template<typename T>
std::vector<std::tuple<int, std::pair<std::string, std::shared_ptr<ListOfType<std::shared_ptr<T>>>>>> parser::nodes;
/**--------------------------------------------------------------------------
 * @brief default constructor
 *
 * @param tokens is a list of instances of Tokens class
 * --------------------------------------------------------------------------
*/
parser::parser(std::vector<Token>& tokens): tokens_(tokens) {}
/** ---------------------------------------------------------------------------------------------------------------------------------------
 * @brief Used for calling the other rules for processing the tokens generated by the scanner
 *
 * @details This method represents the binary section in the grammar in parser.h. It uses variant which is known as a union type safe. 
    It will recrusive call itself functioning just like the grammar layout in parser.h
 * @details If it doesn't find a match it will step out of the loop and return back to expression(). 
    Otherwise, it will keep storing the calls into expr and push the res to a vector for farther processing 
 * @return comparision()
 * ---------------------------------------------------------------------------------------------------------------------------------------
*/
ExprTypes<Binary, Unary, Grouping, Literal> parser::equality()  {
    // Recursion left !=
    auto expr_ = comparison(); 
    while (match(TokenType::BANG_EQUAL, TokenType::EQUAL_EQUAL)) {
        const Token op = previous();
        // Recursion right ==
        auto right = comparison();
        expr = std::make_shared<ExprVariant>(Binary(expr_, op, right)); // initialize it with Binary instance
        auto res = compressedAstTree(idx, std::string("Binary"), {expr});
        nodes<ExprVariant>.push_back(res);
        idx++;
    }
    return expr;
}
/** --------------------------------------------------------------------------
 * @brief Called from the equality() method. Will call term() and start trying to create the Binary Nodes
 *
 * @return term()
 * --------------------------------------------------------------------------
*/
ExprTypes<Binary, Unary, Grouping, Literal> parser::comparison()  {
    auto expr_ = term();
    while (match(TokenType::GREATER, TokenType::GREATER_EQUAL, TokenType::LESS, TokenType::LESS_EQUAL)) {
        const Token op = previous();
        auto right = term();
        expr = std::make_shared<ExprVariant>(Binary(expr_, op, right));
        auto res = compressedAstTree(idx, std::string("Binary"), {expr});
        nodes<ExprVariant>.push_back(res);
        idx++;
    }
    return expr;
}
/** --------------------------------------------------------------------------
 * @brief Gets called from comparison and searches through the tokens for minus or plus
 *
 * @return expr 
 *
 * @details expr is a shared_ptr wrapped with variant that holds Binary, Unary, Grouping, and Literal instances
 * --------------------------------------------------------------------------
*/
ExprTypes<Binary, Unary, Grouping, Literal> parser::term() {
    auto expr_ = factor();
    while (match(TokenType::MINUS, TokenType::PLUS)) {
        const Token op = previous();
        auto right = factor();
        expr = std::make_shared<ExprVariant>(Binary(expr_, op, right)); // initialize it with Binary instance
        auto res = compressedAstTree(idx, std::string("Binary"), {expr});
        nodes<ExprVariant>.push_back(res);
        idx++;
    }
    return expr;
}
/** --------------------------------------------------------------------------
 * @brief Gets called from term(). Searches the tokens for slash or star which are multiplication/division
 *
 * @return expr
 *
 * @details expr is a shared_ptr wrapper that wraps around variants that hold Binary, Unary, Grouping, and Literal instances
 * --------------------------------------------------------------------------
*/
ExprTypes<Binary, Unary, Grouping, Literal> parser::factor() {
    auto expr_ = unary();
    while (match(TokenType::SLASH, TokenType::STAR)) {
        const Token op = previous();
        auto right = unary();
        expr = std::make_shared<ExprVariant>(Binary(expr_, op, right));
        auto res = compressedAstTree(idx, std::string("Binary"), {expr});
        nodes<ExprVariant>.push_back(res);
        idx++;
    }
    return expr;
}
/** --------------------------------------------------------------------------
 * @brief Gets called from factor(). Searches for != and minus tokens
 *
 * @return Either expr or primary()
 *
 * @details expr is a shared_ptr that wraps around a variant that holds Binary, Unary, Grouping, and Literal instances
 * --------------------------------------------------------------------------
*/
ExprTypes<Binary, Unary, Grouping, Literal> parser::unary() {
    if (match(TokenType::BANG, TokenType::MINUS)) {
        const Token op = previous();
        auto right = unary();
        expr = std::make_shared<ExprVariant>(Unary(right, op));
        auto res = compressedAstTree(idx, std::string("Unary"), {right});
        nodes<ExprVariant>.push_back(res);
        idx++;
        return expr;
    }
    return primary();
}
/** --------------------------------------------------------------------------
 * @brief Gets called from unary(). 
 *
 * @return expr after going through a series of if statements or will through an exception of '(' or ')'  
 * --------------------------------------------------------------------------
*/
ExprTypes<Binary, Unary, Grouping, Literal> parser::primary() {
    if (match(TokenType::FALSE)) {
        expr = std::make_shared<ExprVariant>(Literal(false)); // initialize it with Literal instance
        ExprTypes<std::monostate, Expr<Literal>> L = std::make_shared<std::variant<std::monostate, Expr<Literal>>>(std::variant<std::monostate, Expr<Literal>>(std::get<Literal>(*expr)));;
        auto res = compressedAstTree(idx, std::string("Literal"), {L});
        nodes<std::variant<std::monostate, Expr<Literal>>>.push_back(res);
        idx++;
        return expr;
    }
    if (match(TokenType::TRUE)) {
        expr = std::make_shared<ExprVariant>(Literal(true));
        auto res = compressedAstTree(idx, std::string("Literal"), {expr});
        nodes<ExprVariant>.push_back(res);
        idx++;
        return expr;
    }
    if (match(TokenType::NIL)) {
        expr = std::make_shared<ExprVariant>(Literal(NULL));
        auto res = compressedAstTree(idx, std::string("Literal"), {expr});
        nodes<ExprVariant>.push_back(res);
        idx++;
        return expr;
    }
    if (match(TokenType::NUMBER, TokenType::STRING)) {
        expr = std::make_shared<ExprVariant>(Literal(previous().getLiteral()));
        auto res = compressedAstTree(idx, std::string("Literal"), {expr}); 
        nodes<ExprVariant>.push_back(res);
        idx++;
        return expr;
    }
    if (match(TokenType::LEFT_PAREN)) {
        auto expr_ = expression();
        expr = std::make_shared<ExprVariant>(Grouping(expr_));
        auto res = compressedAstTree(idx, std::string("Grouping"), {expr}); 
        nodes<ExprVariant>.push_back(res);
        idx++;
        return expr;
    }
    throw error(peek(), "Expect expression.");
}
/** --------------------------------------------------------------------------
 * @brief Expands into equality to start the recrusion
 *
 * @details It becomes equality's caller
 *
 * @return equality()
 * --------------------------------------------------------------------------
*/
ExprTypes<Binary, Unary, Grouping, Literal> parser::expression() { return equality(); }
/** --------------------------------------------------------------------------
 * @brief Calls in expression to start the parsing sequence by following the grammar
 *
 * @details catches any exceptions that were thrown during run time 
 *
 * @return Either return from all the recrusive calls if nothing was thrown, otherwise return null 
 * --------------------------------------------------------------------------
*/
ExprTypes<Binary, Unary, Grouping, Literal> parser::parse() {
    try { return expression();}
    catch (parseError<parser>& e) { 
        std::cout << e.what() << std::endl;
        return NULL; 
    }
}

// Additional rules go above this line
//
//
//

